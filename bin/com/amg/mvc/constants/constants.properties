### Important file names
# These files may override settings described here
# This file in particular is for listing beans that are NOT in the default package for
# beans such as controllers, models, services, and views.
config.file.beans = mvcbeans.xml
# This file in particular contains settings for configuring a MVC server.
config.file.settings = mvcsettings.properties

### Default package settings
package.project.base = 
package.bean.controllers = controllers
package.bean.models = models
package.bean.services = services
package.bean.views = views

### Default folders for where specific files can be found
resource.path.bundles = /labels/
# This is where service state will be saved.
resource.path.cache = /cache/
resource.path.config = /mvcconfig/
resource.path.css = /css/
resource.path.images = /img/
resource.path.js = /js/
##This is for servers not utilizing a database.
resource.path.json = /json/
resource.path.templates = /templates/

### Default bean settings
# Scan Settings
# This defines whether or not packages are automatically searched for beans.
# If not, all beans must be listed in beans.xml.
bean.scan.auto = true
# This defines whether or not sub-packages of a base package for beans will be searched.
# E.G. If true, and the service package is org.domain.services, org.domain.services.impl
# will be searched for services too.
bean.scan.recursive = true
# This defines what class's class-loader is used for scanning.
# It defaults to the scanner's class. 
bean.scan.classLoaderClass =

### Bean caching for services, which are singletons.
# Defines whether or not the object is saved to file on destroy
# Previous bean save is always overridden.
bean.cache.service.save = false
# Defines if a service is to be loaded from file (true) or from
# its init method (false).
bean.cache.service.load = false

### Request Filter Settings
# The following setting defines whether or not requests based on bean names will be processed
# E.G. http://server/Bean as a reference to BeanController, BeanModel, and BeanView
bean.request.mapping.name.enable = false
# This will make RequestFilter find a bean using a pattern.
# <name> will be replaced by the bean name, WITHOUT the suffix (E.G. "Bean", not "BeanController")
bean.request.mapping.controller.dir = /action/
bean.request.mapping.view.dir = /page/

### Data settings
# Database : primary data source
# These are all left blank as they must be set by a developer.
data.db.enabled = false
data.db.provider =
data.db.querybuilder = 
data.db.url = 
data.db.username = 
data.db.password =
data.db.driverclassname =

# These are the default configurations for some supported databases
data.db.mysql.driverclassname = com.mysql.jdbc.Driver
data.db.mysql.querybuilder = com.amg.mvc.query.MySqlQueryBuilder

# These are for pooling, and the only properties that will be examined.
data.db.pool.maxActive = 100
data.db.pool.maxIdle = 100
data.db.pool.minIdle = 10
data.db.pool.initialSize = 10
data.db.pool.maxWait = 30000
data.db.pool.testOnBorrow = true
data.db.pool.testOnReturn = true
data.db.pool.testWhileIdle = false
data.db.pool.timeBetweenEvictionRunsMillis = 5000
data.db.pool.minEvictableIdleTimeMillis = 60000
data.db.pool.validationQuery = SELECT 1

### Manual configuration for data - Section NOT IMPLEMENTED, NO PLANS TO DO SO.
# Subject to removal.
data.manual.enabled = false
# Names what class will handle the data
data.manual.handler.class =

### Text file data saving, default
# No settings necessary, properties are recorded in JSON and saved.
# Not implemented, subject to removal pending consideration of alternatives such as Mongo DB.
data.json.enabled = true